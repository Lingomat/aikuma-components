/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */
declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;
    componentOnReady(done: (ele?: this) => void): void;
  }

  interface HTMLAttributes {}
}


import {
  Annotate as AikumaAnnotate
} from './components/annotate/annotate';

declare global {
  interface HTMLAikumaAnnotateElement extends AikumaAnnotate, HTMLStencilElement {
  }
  var HTMLAikumaAnnotateElement: {
    prototype: HTMLAikumaAnnotateElement;
    new (): HTMLAikumaAnnotateElement;
  };
  interface HTMLElementTagNameMap {
    "aikuma-annotate": HTMLAikumaAnnotateElement;
  }
  interface ElementTagNameMap {
    "aikuma-annotate": HTMLAikumaAnnotateElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "aikuma-annotate": JSXElements.AikumaAnnotateAttributes;
    }
  }
  namespace JSXElements {
    export interface AikumaAnnotateAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  Buttony as AikumaButtony
} from './components/buttony/buttony';

declare global {
  interface HTMLAikumaButtonyElement extends AikumaButtony, HTMLStencilElement {
  }
  var HTMLAikumaButtonyElement: {
    prototype: HTMLAikumaButtonyElement;
    new (): HTMLAikumaButtonyElement;
  };
  interface HTMLElementTagNameMap {
    "aikuma-buttony": HTMLAikumaButtonyElement;
  }
  interface ElementTagNameMap {
    "aikuma-buttony": HTMLAikumaButtonyElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "aikuma-buttony": JSXElements.AikumaButtonyAttributes;
    }
  }
  namespace JSXElements {
    export interface AikumaButtonyAttributes extends HTMLAttributes {
      clear?: boolean;
      color?: string;
      disabled?: boolean;
      id?: string;
      size?: string;
    }
  }
}


import {
  ImageGestureVoice as AikumaImageGestureVoice
} from './components/image-gesture-voice/image-gesture-voice';

declare global {
  interface HTMLAikumaImageGestureVoiceElement extends AikumaImageGestureVoice, HTMLStencilElement {
  }
  var HTMLAikumaImageGestureVoiceElement: {
    prototype: HTMLAikumaImageGestureVoiceElement;
    new (): HTMLAikumaImageGestureVoiceElement;
  };
  interface HTMLElementTagNameMap {
    "aikuma-image-gesture-voice": HTMLAikumaImageGestureVoiceElement;
  }
  interface ElementTagNameMap {
    "aikuma-image-gesture-voice": HTMLAikumaImageGestureVoiceElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "aikuma-image-gesture-voice": JSXElements.AikumaImageGestureVoiceAttributes;
    }
  }
  namespace JSXElements {
    export interface AikumaImageGestureVoiceAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  Modal as AikumaModal
} from './components/modal/modal';

declare global {
  interface HTMLAikumaModalElement extends AikumaModal, HTMLStencilElement {
  }
  var HTMLAikumaModalElement: {
    prototype: HTMLAikumaModalElement;
    new (): HTMLAikumaModalElement;
  };
  interface HTMLElementTagNameMap {
    "aikuma-modal": HTMLAikumaModalElement;
  }
  interface ElementTagNameMap {
    "aikuma-modal": HTMLAikumaModalElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "aikuma-modal": JSXElements.AikumaModalAttributes;
    }
  }
  namespace JSXElements {
    export interface AikumaModalAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  SlideShow as AikumaSlideShow
} from './components/slide-show/slide-show';

declare global {
  interface HTMLAikumaSlideShowElement extends AikumaSlideShow, HTMLStencilElement {
  }
  var HTMLAikumaSlideShowElement: {
    prototype: HTMLAikumaSlideShowElement;
    new (): HTMLAikumaSlideShowElement;
  };
  interface HTMLElementTagNameMap {
    "aikuma-slide-show": HTMLAikumaSlideShowElement;
  }
  interface ElementTagNameMap {
    "aikuma-slide-show": HTMLAikumaSlideShowElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "aikuma-slide-show": JSXElements.AikumaSlideShowAttributes;
    }
  }
  namespace JSXElements {
    export interface AikumaSlideShowAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  TranslateIGV as AikumaTranslateIgv
} from './components/translate-igv/translate-igv';

declare global {
  interface HTMLAikumaTranslateIgvElement extends AikumaTranslateIgv, HTMLStencilElement {
  }
  var HTMLAikumaTranslateIgvElement: {
    prototype: HTMLAikumaTranslateIgvElement;
    new (): HTMLAikumaTranslateIgvElement;
  };
  interface HTMLElementTagNameMap {
    "aikuma-translate-igv": HTMLAikumaTranslateIgvElement;
  }
  interface ElementTagNameMap {
    "aikuma-translate-igv": HTMLAikumaTranslateIgvElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "aikuma-translate-igv": JSXElements.AikumaTranslateIgvAttributes;
    }
  }
  namespace JSXElements {
    export interface AikumaTranslateIgvAttributes extends HTMLAttributes {
      
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }
