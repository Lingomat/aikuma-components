/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;
    componentOnReady(done: (ele?: this) => void): void;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}

import {
  IGVData,
  IGVOptions,
} from './components/image-gesture-voice/image-gesture-voice';
import {
  Slide,
} from './components/slide-show/slide-show';
import {
  IGVData as IGVData2,
  IGVOptions as IGVOptions2,
} from './components/image-gesture-voice/image-gesture-voice';
import {
  IGVTranslation,
} from './components/translate-igv/translate-igv';

declare global {

  namespace StencilComponents {
    interface AikumaAnnotate {
      'load': (url: string) => void;
      'loadBlob': (b: Blob) => void;
    }
  }

  interface HTMLAikumaAnnotateElement extends StencilComponents.AikumaAnnotate, HTMLStencilElement {}

  var HTMLAikumaAnnotateElement: {
    prototype: HTMLAikumaAnnotateElement;
    new (): HTMLAikumaAnnotateElement;
  };
  interface HTMLElementTagNameMap {
    'aikuma-annotate': HTMLAikumaAnnotateElement;
  }
  interface ElementTagNameMap {
    'aikuma-annotate': HTMLAikumaAnnotateElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'aikuma-annotate': JSXElements.AikumaAnnotateAttributes;
    }
  }
  namespace JSXElements {
    export interface AikumaAnnotateAttributes extends HTMLAttributes {
      'onClickEvent'?: (event: CustomEvent<{id: string, type: string}>) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface AikumaButtony {
      'clear': boolean;
      'color': string;
      'disabled': boolean;
      'id': string;
      'size': string;
    }
  }

  interface HTMLAikumaButtonyElement extends StencilComponents.AikumaButtony, HTMLStencilElement {}

  var HTMLAikumaButtonyElement: {
    prototype: HTMLAikumaButtonyElement;
    new (): HTMLAikumaButtonyElement;
  };
  interface HTMLElementTagNameMap {
    'aikuma-buttony': HTMLAikumaButtonyElement;
  }
  interface ElementTagNameMap {
    'aikuma-buttony': HTMLAikumaButtonyElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'aikuma-buttony': JSXElements.AikumaButtonyAttributes;
    }
  }
  namespace JSXElements {
    export interface AikumaButtonyAttributes extends HTMLAttributes {
      'clear'?: boolean;
      'color'?: string;
      'disabled'?: boolean;
      'id'?: string;
      'onClickEvent'?: (event: CustomEvent<{id: string, type: string}>) => void;
      'size'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface AikumaImageGestureVoice {
      'loadFromImageURLs': (images: string[], opts?: IGVOptions) => Promise<any>;
      'restoreFromIGVData': (igvd: IGVData) => void;
      'waitForComplete': () => Promise<IGVData>;
    }
  }

  interface HTMLAikumaImageGestureVoiceElement extends StencilComponents.AikumaImageGestureVoice, HTMLStencilElement {}

  var HTMLAikumaImageGestureVoiceElement: {
    prototype: HTMLAikumaImageGestureVoiceElement;
    new (): HTMLAikumaImageGestureVoiceElement;
  };
  interface HTMLElementTagNameMap {
    'aikuma-image-gesture-voice': HTMLAikumaImageGestureVoiceElement;
  }
  interface ElementTagNameMap {
    'aikuma-image-gesture-voice': HTMLAikumaImageGestureVoiceElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'aikuma-image-gesture-voice': JSXElements.AikumaImageGestureVoiceAttributes;
    }
  }
  namespace JSXElements {
    export interface AikumaImageGestureVoiceAttributes extends HTMLAttributes {
      'onAikumaIGV'?: (event: CustomEvent<string>) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface AikumaModal {
      'presentDialog': (title: string, message: string, confirm: string, cancel?: string) => Promise<boolean>;
    }
  }

  interface HTMLAikumaModalElement extends StencilComponents.AikumaModal, HTMLStencilElement {}

  var HTMLAikumaModalElement: {
    prototype: HTMLAikumaModalElement;
    new (): HTMLAikumaModalElement;
  };
  interface HTMLElementTagNameMap {
    'aikuma-modal': HTMLAikumaModalElement;
  }
  interface ElementTagNameMap {
    'aikuma-modal': HTMLAikumaModalElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'aikuma-modal': JSXElements.AikumaModalAttributes;
    }
  }
  namespace JSXElements {
    export interface AikumaModalAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface AikumaProgress {
      'completedColor': string;
      'height': number;
      'lineWidth': number;
      'progressColor': string;
      'setProgress': (progress: number) => void;
      'strokeColor': string;
    }
  }

  interface HTMLAikumaProgressElement extends StencilComponents.AikumaProgress, HTMLStencilElement {}

  var HTMLAikumaProgressElement: {
    prototype: HTMLAikumaProgressElement;
    new (): HTMLAikumaProgressElement;
  };
  interface HTMLElementTagNameMap {
    'aikuma-progress': HTMLAikumaProgressElement;
  }
  interface ElementTagNameMap {
    'aikuma-progress': HTMLAikumaProgressElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'aikuma-progress': JSXElements.AikumaProgressAttributes;
    }
  }
  namespace JSXElements {
    export interface AikumaProgressAttributes extends HTMLAttributes {
      'completedColor'?: string;
      'height'?: number;
      'lineWidth'?: number;
      'progressColor'?: string;
      'strokeColor'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface AikumaSlideShow {
      'getCurrent': () => number;
      'getCurrentImageElement': () => HTMLImageElement;
      'getSwiperInstances': () => { main: any; thumb: any; };
      'highlightSlide': (idx: number) => void;
      'isChanging': () => boolean;
      'loadImages': (images: string[]) => Promise<Slide[]>;
      'loadSlides': (slides: Slide[]) => void;
      'lockPrevious': () => void;
      'slideTo': (idx: number, instant?: boolean) => void;
      'unlockPrevious': () => void;
    }
  }

  interface HTMLAikumaSlideShowElement extends StencilComponents.AikumaSlideShow, HTMLStencilElement {}

  var HTMLAikumaSlideShowElement: {
    prototype: HTMLAikumaSlideShowElement;
    new (): HTMLAikumaSlideShowElement;
  };
  interface HTMLElementTagNameMap {
    'aikuma-slide-show': HTMLAikumaSlideShowElement;
  }
  interface ElementTagNameMap {
    'aikuma-slide-show': HTMLAikumaSlideShowElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'aikuma-slide-show': JSXElements.AikumaSlideShowAttributes;
    }
  }
  namespace JSXElements {
    export interface AikumaSlideShowAttributes extends HTMLAttributes {
      'onSlideEvent'?: (event: CustomEvent<{type: string, val: any}>) => void;
      'onSlideSize'?: (event: CustomEvent<{content: DOMRect, frame: DOMRect}>) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface AikumaTranslateIgv {
      'loadIGVData': (data: IGVData, opts?: IGVOptions) => Promise<any>;
      'waitForComplete': () => Promise<IGVTranslation>;
    }
  }

  interface HTMLAikumaTranslateIgvElement extends StencilComponents.AikumaTranslateIgv, HTMLStencilElement {}

  var HTMLAikumaTranslateIgvElement: {
    prototype: HTMLAikumaTranslateIgvElement;
    new (): HTMLAikumaTranslateIgvElement;
  };
  interface HTMLElementTagNameMap {
    'aikuma-translate-igv': HTMLAikumaTranslateIgvElement;
  }
  interface ElementTagNameMap {
    'aikuma-translate-igv': HTMLAikumaTranslateIgvElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'aikuma-translate-igv': JSXElements.AikumaTranslateIgvAttributes;
    }
  }
  namespace JSXElements {
    export interface AikumaTranslateIgvAttributes extends HTMLAttributes {

    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }
