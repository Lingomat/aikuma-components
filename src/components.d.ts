/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  IGVBundle,
  IGVData,
  IGVOptions,
  IGVTranslation,
  Slide,
  SlideshowSettings,
} from './interface';


export namespace Components {
  interface AikumaAnnotate {
    'load': (url: string) => Promise<void>;
    'loadBlob': (b: Blob) => Promise<void>;
  }
  interface AikumaButtony {
    'clear': boolean;
    'disabled': boolean;
    'id': string;
    'size': string;
  }
  interface AikumaCamera {
    'facingMode': string;
    'height': number;
    'imageQuality': number;
    'imageType': string;
    'pause': () => Promise<void>;
    'ready': () => Promise<any>;
    'resume': () => Promise<void>;
    'switchCamera': () => Promise<void>;
    'takePicture': (pause?: boolean) => Promise<Blob>;
    'width': number;
  }
  interface AikumaImageGestureVoice {
    'loadFromImageURLs': (images: string[], opts?: IGVOptions) => Promise<any>;
    'restoreFromIGVData': (igvd: IGVData) => Promise<void>;
    'waitForComplete': () => Promise<IGVData>;
  }
  interface AikumaModal {
    'presentDialog': (title: string, message: string, confirm: string, cancel?: string) => Promise<boolean>;
  }
  interface AikumaPlayIgv {
    'restoreFromIGVBundle': (igvb: IGVBundle) => Promise<void>;
  }
  interface AikumaProgress {
    'completedColor': string;
    'height': number;
    'lineWidth': number;
    'progressColor': string;
    'setProgress': (progress: number) => Promise<void>;
    'strokeColor': string;
  }
  interface AikumaSlideShow {
    'getCurrent': () => Promise<number>;
    'getCurrentImageElement': () => Promise<HTMLImageElement>;
    'getSwiperInstances': () => Promise<{ main?: any; thumb?: any; }>;
    'highlightSlide': (idx: number) => Promise<void>;
    'isChanging': () => Promise<boolean>;
    'loadImages': (images: string[], settings?: SlideshowSettings) => Promise<Slide[]>;
    'loadSlides': (slides: Slide[]) => Promise<void>;
    'lockPrevious': () => Promise<void>;
    'slideTo': (idx: number, instant?: boolean) => Promise<void>;
    'unlockPrevious': () => Promise<void>;
  }
  interface AikumaTranslateIgv {
    'loadIGVData': (data: IGVData, opts?: IGVOptions) => Promise<any>;
    'waitForComplete': () => Promise<IGVTranslation>;
  }
}

declare global {


  interface HTMLAikumaAnnotateElement extends Components.AikumaAnnotate, HTMLStencilElement {}
  var HTMLAikumaAnnotateElement: {
    prototype: HTMLAikumaAnnotateElement;
    new (): HTMLAikumaAnnotateElement;
  };

  interface HTMLAikumaButtonyElement extends Components.AikumaButtony, HTMLStencilElement {}
  var HTMLAikumaButtonyElement: {
    prototype: HTMLAikumaButtonyElement;
    new (): HTMLAikumaButtonyElement;
  };

  interface HTMLAikumaCameraElement extends Components.AikumaCamera, HTMLStencilElement {}
  var HTMLAikumaCameraElement: {
    prototype: HTMLAikumaCameraElement;
    new (): HTMLAikumaCameraElement;
  };

  interface HTMLAikumaImageGestureVoiceElement extends Components.AikumaImageGestureVoice, HTMLStencilElement {}
  var HTMLAikumaImageGestureVoiceElement: {
    prototype: HTMLAikumaImageGestureVoiceElement;
    new (): HTMLAikumaImageGestureVoiceElement;
  };

  interface HTMLAikumaModalElement extends Components.AikumaModal, HTMLStencilElement {}
  var HTMLAikumaModalElement: {
    prototype: HTMLAikumaModalElement;
    new (): HTMLAikumaModalElement;
  };

  interface HTMLAikumaPlayIgvElement extends Components.AikumaPlayIgv, HTMLStencilElement {}
  var HTMLAikumaPlayIgvElement: {
    prototype: HTMLAikumaPlayIgvElement;
    new (): HTMLAikumaPlayIgvElement;
  };

  interface HTMLAikumaProgressElement extends Components.AikumaProgress, HTMLStencilElement {}
  var HTMLAikumaProgressElement: {
    prototype: HTMLAikumaProgressElement;
    new (): HTMLAikumaProgressElement;
  };

  interface HTMLAikumaSlideShowElement extends Components.AikumaSlideShow, HTMLStencilElement {}
  var HTMLAikumaSlideShowElement: {
    prototype: HTMLAikumaSlideShowElement;
    new (): HTMLAikumaSlideShowElement;
  };

  interface HTMLAikumaTranslateIgvElement extends Components.AikumaTranslateIgv, HTMLStencilElement {}
  var HTMLAikumaTranslateIgvElement: {
    prototype: HTMLAikumaTranslateIgvElement;
    new (): HTMLAikumaTranslateIgvElement;
  };
  interface HTMLElementTagNameMap {
    'aikuma-annotate': HTMLAikumaAnnotateElement;
    'aikuma-buttony': HTMLAikumaButtonyElement;
    'aikuma-camera': HTMLAikumaCameraElement;
    'aikuma-image-gesture-voice': HTMLAikumaImageGestureVoiceElement;
    'aikuma-modal': HTMLAikumaModalElement;
    'aikuma-play-igv': HTMLAikumaPlayIgvElement;
    'aikuma-progress': HTMLAikumaProgressElement;
    'aikuma-slide-show': HTMLAikumaSlideShowElement;
    'aikuma-translate-igv': HTMLAikumaTranslateIgvElement;
  }
}

declare namespace LocalJSX {
  interface AikumaAnnotate extends JSXBase.HTMLAttributes<HTMLAikumaAnnotateElement> {
    'onClickEvent'?: (event: CustomEvent<{id: string, type: string}>) => void;
  }
  interface AikumaButtony extends JSXBase.HTMLAttributes<HTMLAikumaButtonyElement> {
    'clear'?: boolean;
    'disabled'?: boolean;
    'id'?: string;
    'onClickEvent'?: (event: CustomEvent<{id: string, type: string}>) => void;
    'size'?: string;
  }
  interface AikumaCamera extends JSXBase.HTMLAttributes<HTMLAikumaCameraElement> {
    'facingMode'?: string;
    'height'?: number;
    'imageQuality'?: number;
    'imageType'?: string;
    'width'?: number;
  }
  interface AikumaImageGestureVoice extends JSXBase.HTMLAttributes<HTMLAikumaImageGestureVoiceElement> {
    'onAikumaIGV'?: (event: CustomEvent<string>) => void;
  }
  interface AikumaModal extends JSXBase.HTMLAttributes<HTMLAikumaModalElement> {}
  interface AikumaPlayIgv extends JSXBase.HTMLAttributes<HTMLAikumaPlayIgvElement> {
    'onAikumaIGV'?: (event: CustomEvent<string>) => void;
  }
  interface AikumaProgress extends JSXBase.HTMLAttributes<HTMLAikumaProgressElement> {
    'completedColor'?: string;
    'height'?: number;
    'lineWidth'?: number;
    'progressColor'?: string;
    'strokeColor'?: string;
  }
  interface AikumaSlideShow extends JSXBase.HTMLAttributes<HTMLAikumaSlideShowElement> {
    'onSlideEvent'?: (event: CustomEvent<{type: string, val: any}>) => void;
    'onSlideSize'?: (event: CustomEvent<{content: DOMRect, frame: DOMRect}>) => void;
  }
  interface AikumaTranslateIgv extends JSXBase.HTMLAttributes<HTMLAikumaTranslateIgvElement> {}

  interface IntrinsicElements {
    'aikuma-annotate': AikumaAnnotate;
    'aikuma-buttony': AikumaButtony;
    'aikuma-camera': AikumaCamera;
    'aikuma-image-gesture-voice': AikumaImageGestureVoice;
    'aikuma-modal': AikumaModal;
    'aikuma-play-igv': AikumaPlayIgv;
    'aikuma-progress': AikumaProgress;
    'aikuma-slide-show': AikumaSlideShow;
    'aikuma-translate-igv': AikumaTranslateIgv;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements extends LocalJSX.IntrinsicElements {}
  }
}


