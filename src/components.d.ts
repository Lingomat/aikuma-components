/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;
    componentOnReady(done: (ele?: this) => void): void;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}

import {
  IGVData,
} from './components/image-gesture-voice/image-gesture-voice';
import {
  Slide,
} from './components/slide-show/slide-show';

declare global {
  interface HTMLAikumaAnnotateElement extends HTMLStencilElement {
    'load': (url: string) => void;
    'loadBlob': (b: Blob) => void;
  }
  var HTMLAikumaAnnotateElement: {
    prototype: HTMLAikumaAnnotateElement;
    new (): HTMLAikumaAnnotateElement;
  };
  interface HTMLElementTagNameMap {
    'aikuma-annotate': HTMLAikumaAnnotateElement;
  }
  interface ElementTagNameMap {
    'aikuma-annotate': HTMLAikumaAnnotateElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'aikuma-annotate': JSXElements.AikumaAnnotateAttributes;
    }
  }
  namespace JSXElements {
    export interface AikumaAnnotateAttributes extends HTMLAttributes {
      'onClickEvent'?: (event: CustomEvent<{id: string, type: string}>) => void;
    }
  }
}


declare global {
  interface HTMLAikumaButtonyElement extends HTMLStencilElement {
    'clear': boolean;
    'color': string;
    'disabled': boolean;
    'id': string;
    'size': string;
  }
  var HTMLAikumaButtonyElement: {
    prototype: HTMLAikumaButtonyElement;
    new (): HTMLAikumaButtonyElement;
  };
  interface HTMLElementTagNameMap {
    'aikuma-buttony': HTMLAikumaButtonyElement;
  }
  interface ElementTagNameMap {
    'aikuma-buttony': HTMLAikumaButtonyElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'aikuma-buttony': JSXElements.AikumaButtonyAttributes;
    }
  }
  namespace JSXElements {
    export interface AikumaButtonyAttributes extends HTMLAttributes {
      'clear'?: boolean;
      'color'?: string;
      'disabled'?: boolean;
      'id'?: string;
      'onClickEvent'?: (event: CustomEvent<{id: string, type: string}>) => void;
      'size'?: string;
    }
  }
}


declare global {
  interface HTMLAikumaImageGestureVoiceElement extends HTMLStencilElement {
    'loadFromImageURLs': (images: string[]) => Promise<void>;
    'restoreFromIGVData': (igvd: IGVData) => void;
    'waitForComplete': () => Promise<IGVData>;
  }
  var HTMLAikumaImageGestureVoiceElement: {
    prototype: HTMLAikumaImageGestureVoiceElement;
    new (): HTMLAikumaImageGestureVoiceElement;
  };
  interface HTMLElementTagNameMap {
    'aikuma-image-gesture-voice': HTMLAikumaImageGestureVoiceElement;
  }
  interface ElementTagNameMap {
    'aikuma-image-gesture-voice': HTMLAikumaImageGestureVoiceElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'aikuma-image-gesture-voice': JSXElements.AikumaImageGestureVoiceAttributes;
    }
  }
  namespace JSXElements {
    export interface AikumaImageGestureVoiceAttributes extends HTMLAttributes {
      'onAikumaIGV'?: (event: CustomEvent<string>) => void;
    }
  }
}


declare global {
  interface HTMLAikumaModalElement extends HTMLStencilElement {
    'presentDialog': (title: string, message: string, confirm: string, cancel?: string) => Promise<boolean>;
  }
  var HTMLAikumaModalElement: {
    prototype: HTMLAikumaModalElement;
    new (): HTMLAikumaModalElement;
  };
  interface HTMLElementTagNameMap {
    'aikuma-modal': HTMLAikumaModalElement;
  }
  interface ElementTagNameMap {
    'aikuma-modal': HTMLAikumaModalElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'aikuma-modal': JSXElements.AikumaModalAttributes;
    }
  }
  namespace JSXElements {
    export interface AikumaModalAttributes extends HTMLAttributes {

    }
  }
}


declare global {
  interface HTMLAikumaSlideShowElement extends HTMLStencilElement {
    'getCurrent': () => number;
    'getCurrentImageElement': () => HTMLImageElement;
    'highlightSlide': (idx: number) => void;
    'isChanging': () => boolean;
    'loadImages': (images: string[]) => Promise<Slide[]>;
    'lockPrevious': () => void;
    'slideTo': (idx: number, instant?: boolean, skipCallback?: boolean) => void;
    'unlockPrevious': () => void;
  }
  var HTMLAikumaSlideShowElement: {
    prototype: HTMLAikumaSlideShowElement;
    new (): HTMLAikumaSlideShowElement;
  };
  interface HTMLElementTagNameMap {
    'aikuma-slide-show': HTMLAikumaSlideShowElement;
  }
  interface ElementTagNameMap {
    'aikuma-slide-show': HTMLAikumaSlideShowElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'aikuma-slide-show': JSXElements.AikumaSlideShowAttributes;
    }
  }
  namespace JSXElements {
    export interface AikumaSlideShowAttributes extends HTMLAttributes {
      'onSlideEvent'?: (event: CustomEvent<{type: string, val: any}>) => void;
      'onSlideSize'?: (event: CustomEvent<{content: DOMRect, frame: DOMRect}>) => void;
    }
  }
}


declare global {
  interface HTMLAikumaTranslateIgvElement extends HTMLStencilElement {

  }
  var HTMLAikumaTranslateIgvElement: {
    prototype: HTMLAikumaTranslateIgvElement;
    new (): HTMLAikumaTranslateIgvElement;
  };
  interface HTMLElementTagNameMap {
    'aikuma-translate-igv': HTMLAikumaTranslateIgvElement;
  }
  interface ElementTagNameMap {
    'aikuma-translate-igv': HTMLAikumaTranslateIgvElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'aikuma-translate-igv': JSXElements.AikumaTranslateIgvAttributes;
    }
  }
  namespace JSXElements {
    export interface AikumaTranslateIgvAttributes extends HTMLAttributes {

    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }
