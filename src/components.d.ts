/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import '@stencil/core';


import {
  IGVBundle,
  IGVData,
  IGVOptions,
  IGVTranslation,
  Slide,
  SlideshowSettings,
} from './interface';


export namespace Components {

  interface AikumaAnnotate {
    'load': (url: string) => void;
    'loadBlob': (b: Blob) => void;
  }
  interface AikumaAnnotateAttributes extends StencilHTMLAttributes {
    'onClickEvent'?: (event: CustomEvent<{id: string, type: string}>) => void;
  }

  interface AikumaButtony {
    'clear': boolean;
    'disabled': boolean;
    'id': string;
    'size': string;
  }
  interface AikumaButtonyAttributes extends StencilHTMLAttributes {
    'clear'?: boolean;
    'disabled'?: boolean;
    'id'?: string;
    'onClickEvent'?: (event: CustomEvent<{id: string, type: string}>) => void;
    'size'?: string;
  }

  interface AikumaCamera {
    'facingMode': string;
    'height': number;
    'imageQuality': number;
    'imageType': string;
    'pause': () => void;
    'ready': () => Promise<any>;
    'resume': () => void;
    'switchCamera': () => Promise<void>;
    'takePicture': (pause?: boolean) => Promise<Blob>;
    'width': number;
  }
  interface AikumaCameraAttributes extends StencilHTMLAttributes {
    'facingMode'?: string;
    'height'?: number;
    'imageQuality'?: number;
    'imageType'?: string;
    'width'?: number;
  }

  interface AikumaImageGestureVoice {
    'loadFromImageURLs': (images: string[], opts?: IGVOptions) => Promise<any>;
    'restoreFromIGVData': (igvd: IGVData) => void;
    'waitForComplete': () => Promise<IGVData>;
  }
  interface AikumaImageGestureVoiceAttributes extends StencilHTMLAttributes {
    'onAikumaIGV'?: (event: CustomEvent<string>) => void;
  }

  interface AikumaModal {
    'presentDialog': (title: string, message: string, confirm: string, cancel?: string) => Promise<boolean>;
  }
  interface AikumaModalAttributes extends StencilHTMLAttributes {}

  interface AikumaPlayIgv {
    'restoreFromIGVBundle': (igvb: IGVBundle) => Promise<void>;
  }
  interface AikumaPlayIgvAttributes extends StencilHTMLAttributes {
    'onAikumaIGV'?: (event: CustomEvent<string>) => void;
  }

  interface AikumaProgress {
    'completedColor': string;
    'height': number;
    'lineWidth': number;
    'progressColor': string;
    'setProgress': (progress: number) => void;
    'strokeColor': string;
  }
  interface AikumaProgressAttributes extends StencilHTMLAttributes {
    'completedColor'?: string;
    'height'?: number;
    'lineWidth'?: number;
    'progressColor'?: string;
    'strokeColor'?: string;
  }

  interface AikumaSlideShow {
    'getCurrent': () => Promise<number>;
    'getCurrentImageElement': () => Promise<HTMLImageElement>;
    'getSwiperInstances': () => Promise<{ main?: any; thumb?: any; }>;
    'highlightSlide': (idx: number) => Promise<void>;
    'isChanging': () => Promise<boolean>;
    'loadImages': (images: string[], settings?: SlideshowSettings) => Promise<Slide[]>;
    'loadSlides': (slides: Slide[]) => Promise<void>;
    'lockPrevious': () => Promise<void>;
    'slideTo': (idx: number, instant?: boolean) => Promise<void>;
    'unlockPrevious': () => Promise<void>;
  }
  interface AikumaSlideShowAttributes extends StencilHTMLAttributes {
    'onSlideEvent'?: (event: CustomEvent<{type: string, val: any}>) => void;
    'onSlideSize'?: (event: CustomEvent<{content: DOMRect, frame: DOMRect}>) => void;
  }

  interface AikumaTranslateIgv {
    'loadIGVData': (data: IGVData, opts?: IGVOptions) => Promise<any>;
    'waitForComplete': () => Promise<IGVTranslation>;
  }
  interface AikumaTranslateIgvAttributes extends StencilHTMLAttributes {}
}

declare global {
  interface StencilElementInterfaces {
    'AikumaAnnotate': Components.AikumaAnnotate;
    'AikumaButtony': Components.AikumaButtony;
    'AikumaCamera': Components.AikumaCamera;
    'AikumaImageGestureVoice': Components.AikumaImageGestureVoice;
    'AikumaModal': Components.AikumaModal;
    'AikumaPlayIgv': Components.AikumaPlayIgv;
    'AikumaProgress': Components.AikumaProgress;
    'AikumaSlideShow': Components.AikumaSlideShow;
    'AikumaTranslateIgv': Components.AikumaTranslateIgv;
  }

  interface StencilIntrinsicElements {
    'aikuma-annotate': Components.AikumaAnnotateAttributes;
    'aikuma-buttony': Components.AikumaButtonyAttributes;
    'aikuma-camera': Components.AikumaCameraAttributes;
    'aikuma-image-gesture-voice': Components.AikumaImageGestureVoiceAttributes;
    'aikuma-modal': Components.AikumaModalAttributes;
    'aikuma-play-igv': Components.AikumaPlayIgvAttributes;
    'aikuma-progress': Components.AikumaProgressAttributes;
    'aikuma-slide-show': Components.AikumaSlideShowAttributes;
    'aikuma-translate-igv': Components.AikumaTranslateIgvAttributes;
  }


  interface HTMLAikumaAnnotateElement extends Components.AikumaAnnotate, HTMLStencilElement {}
  var HTMLAikumaAnnotateElement: {
    prototype: HTMLAikumaAnnotateElement;
    new (): HTMLAikumaAnnotateElement;
  };

  interface HTMLAikumaButtonyElement extends Components.AikumaButtony, HTMLStencilElement {}
  var HTMLAikumaButtonyElement: {
    prototype: HTMLAikumaButtonyElement;
    new (): HTMLAikumaButtonyElement;
  };

  interface HTMLAikumaCameraElement extends Components.AikumaCamera, HTMLStencilElement {}
  var HTMLAikumaCameraElement: {
    prototype: HTMLAikumaCameraElement;
    new (): HTMLAikumaCameraElement;
  };

  interface HTMLAikumaImageGestureVoiceElement extends Components.AikumaImageGestureVoice, HTMLStencilElement {}
  var HTMLAikumaImageGestureVoiceElement: {
    prototype: HTMLAikumaImageGestureVoiceElement;
    new (): HTMLAikumaImageGestureVoiceElement;
  };

  interface HTMLAikumaModalElement extends Components.AikumaModal, HTMLStencilElement {}
  var HTMLAikumaModalElement: {
    prototype: HTMLAikumaModalElement;
    new (): HTMLAikumaModalElement;
  };

  interface HTMLAikumaPlayIgvElement extends Components.AikumaPlayIgv, HTMLStencilElement {}
  var HTMLAikumaPlayIgvElement: {
    prototype: HTMLAikumaPlayIgvElement;
    new (): HTMLAikumaPlayIgvElement;
  };

  interface HTMLAikumaProgressElement extends Components.AikumaProgress, HTMLStencilElement {}
  var HTMLAikumaProgressElement: {
    prototype: HTMLAikumaProgressElement;
    new (): HTMLAikumaProgressElement;
  };

  interface HTMLAikumaSlideShowElement extends Components.AikumaSlideShow, HTMLStencilElement {}
  var HTMLAikumaSlideShowElement: {
    prototype: HTMLAikumaSlideShowElement;
    new (): HTMLAikumaSlideShowElement;
  };

  interface HTMLAikumaTranslateIgvElement extends Components.AikumaTranslateIgv, HTMLStencilElement {}
  var HTMLAikumaTranslateIgvElement: {
    prototype: HTMLAikumaTranslateIgvElement;
    new (): HTMLAikumaTranslateIgvElement;
  };

  interface HTMLElementTagNameMap {
    'aikuma-annotate': HTMLAikumaAnnotateElement
    'aikuma-buttony': HTMLAikumaButtonyElement
    'aikuma-camera': HTMLAikumaCameraElement
    'aikuma-image-gesture-voice': HTMLAikumaImageGestureVoiceElement
    'aikuma-modal': HTMLAikumaModalElement
    'aikuma-play-igv': HTMLAikumaPlayIgvElement
    'aikuma-progress': HTMLAikumaProgressElement
    'aikuma-slide-show': HTMLAikumaSlideShowElement
    'aikuma-translate-igv': HTMLAikumaTranslateIgvElement
  }

  interface ElementTagNameMap {
    'aikuma-annotate': HTMLAikumaAnnotateElement;
    'aikuma-buttony': HTMLAikumaButtonyElement;
    'aikuma-camera': HTMLAikumaCameraElement;
    'aikuma-image-gesture-voice': HTMLAikumaImageGestureVoiceElement;
    'aikuma-modal': HTMLAikumaModalElement;
    'aikuma-play-igv': HTMLAikumaPlayIgvElement;
    'aikuma-progress': HTMLAikumaProgressElement;
    'aikuma-slide-show': HTMLAikumaSlideShowElement;
    'aikuma-translate-igv': HTMLAikumaTranslateIgvElement;
  }


  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends StencilIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends StencilHTMLAttributes {}

}
